namespace _03.Stack
{
    internal class Program
    {
        /******************************************************
        * 스택 (Stack)
        * 
        * 선입후출(FILO), 후입선출(LIFO) 방식의 자료구조
        * 가장 최신 입력된 순서대로 처리해야 하는 상황에 이용
        ******************************************************/

        // <스택 구현>
        // 스택은 리스트를 사용법만 달리하여 구현 가능
        //
        // - 삽입 -
        //         top                      top
        //          ↓                        ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│ │ │ │  =>  │1│2│3│4│5│6│ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // - 삭제 -
        //           top                  top
        //            ↓                    ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│ │ │  =>  │1│2│3│4│5│ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘


        static void Main(string[] args)
        {
            Stack<int> stack = new Stack<int>();
            for(int i = 1; i <= 5; i++)
            {
                stack.Push(i);  // 입력순 : 1, 2, 3, 4, 5  //O(1) 꽉차면 O(n)
            }
            
            Console.WriteLine($"stack.Peek() : { stack.Peek()}"); 

            for(int i = 0;i < 5; i++)
            {
                int val =  stack.Pop(); //출력순서 5, 4, 3, 2, 1 // O(1)
                Console.WriteLine(val) ;
            }
          

            //사용 예)) 게임 UI - 최신 입력을 순서대로 처리 
           
        }
    }
}
